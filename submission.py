import numpy as np
import zipfile

path = "/Users/T162880/Documents/Programs/zillow/"
path = "/Users/apple/Documents/Programs/zillow/"
path = "/Programs/kaggle/zillow/"
path = "/Users/Public/Documents/Kaggle/zillow/"
properties_2016 = "properties_2016.csv"
properties_2017 = "properties_2017.csv"
train_2016 = "train_2016_v2.csv"
train_2017 = "train_2017.csv"
sample_submission = "sample_submission.csv"
my_submission = "my_submission.csv"
zillow_columns = """
parcelid,airconditioningtypeid,architecturalstyletypeid,basementsqft,bathroomcnt,bedroomcnt,buildingclasstypeid,buildingqualitytypeid,calculatedbathnbr,decktypeid,finishedfloor1squarefeet,calculatedfinishedsquarefeet,finishedsquarefeet12,finishedsquarefeet13,finishedsquarefeet15,finishedsquarefeet50,finishedsquarefeet6,fips,fireplacecnt,fullbathcnt,garagecarcnt,garagetotalsqft,hashottuborspa,heatingorsystemtypeid,latitude,longitude,lotsizesquarefeet,poolcnt,poolsizesum,pooltypeid10,pooltypeid2,pooltypeid7,propertycountylandusecode,propertylandusetypeid,propertyzoningdesc,rawcensustractandblock,regionidcity,regionidcounty,regionidneighborhood,regionidzip,roomcnt,storytypeid,threequarterbathnbr,typeconstructiontypeid,unitcnt,yardbuildingsqft17,yardbuildingsqft26,yearbuilt,numberofstories,fireplaceflag,structuretaxvaluedollarcnt,taxvaluedollarcnt,assessmentyear,landtaxvaluedollarcnt,taxamount,taxdelinquencyflag,taxdelinquencyyear,censustractandblock
"""
columns = zillow_columns.strip().split(sep=",")
zcolumns = { value: index for (index, value) in enumerate(columns) }
push_factor = 0.03
function_export = "function_export.log"

def myint(value_str):
    try:
        value = int(float(value_str))
    except:
        return 0
    return value

def convert_bathroom(value_str):
    try:
        value = int(float(value_str)*2)
    except:
        return 0
    return value

features = [
    ["yearbuilt", myint, list(range(1900, 2019)), ],
    ["calculatedfinishedsquarefeet", myint, list(range(300, 6000, 100)) + list(range(6000, 10000, 200)) + list(range(10000, 20000, 500))],
    ["bedroomcnt", myint, list(range(1, 15)), ],
    ["bathroomcnt", convert_bathroom, list(range(1, 10)), ],
    ["lotsizesquarefeet", myint, list(range(1000, 4000, 1000)) + list(range(4000, 10000, 200)) + list(range(10000, 100000, 500))],
    ["taxvaluedollarcnt", myint, list(range(50000, 600000, 10000)) + list(range(600000, 1200000, 20000)) + list(range(1200000, 2000000, 50000)) + list(range(2000000, 10000000, 1000000))],
    ["taxamount", myint, list(range(500, 10000, 100)) + list(range(10000, 20000, 200)) + list(range(20000, 50000, 1000))],
    ["landtaxvaluedollarcnt", myint, list(range(50000, 600000, 10000)) + list(range(600000, 1200000, 20000)) + list(range(1200000, 2000000, 50000)) + list(range(2000000, 10000000, 1000000))],
    #"regionidcity",
    #"regionidzip",
    #"latitude",
    #"longitude",
]

exported_functions = [
(1, 14, 0.0071119212678743471, 0.014871722794322294),
(1, 14, 0.0068985636298381165, 0.014425571110492625),
(1, 14, 0.0066916067209429738, 0.013992803977177845),
(6, 23, 0.016578877875468752, 0.0070931624355250042),
(1, 14, 0.0061871162429006973, 0.01332645340898052),
(6, 23, 0.01585278498907081, 0.0065945527407599118),
(1, 14, 0.0057148998396430728, 0.012695861547082131),
(1, 17, 0.0060047182038671211, 0.014191056742212637),
(6, 23, 0.01495790363473262, 0.0058654780172019434),
(1, 17, 0.0055679190948730948, 0.013565033779111696),
(6, 23, 0.014317166991700048, 0.0054426928158211093),
(1, 14, 0.004684765064579521, 0.011230660643851066),
(6, 23, 0.013707579645009519, 0.0050469967589529194),
(1, 18, 0.0048374810529093239, 0.013198616073608076),
(6, 23, 0.013130150327489534, 0.0046758970501836646),
(1, 14, 0.0039433167699629533, 0.010243101402090046),
(6, 23, 0.012579903145508617, 0.00432890250768239),
(1, 18, 0.0041191181307467829, 0.012184489063625393),
(6, 23, 0.012058600599190193, 0.0040035341655703582),
(1, 18, 0.0038054234259663096, 0.011679208142670471),
(6, 23, 0.011562830938064823, 0.0036990462984373205),
(1, 14, 0.0029946001621158902, 0.0089596071435928456),
(1, 18, 0.0033846108848423679, 0.010929898462895484),
(6, 23, 0.010969527330889217, 0.0032456895175163479),
(1, 14, 0.0026317983205923377, 0.0083264350040360355),
(6, 26, 0.0096254922816183079, 0.002876451903482465),
(1, 18, 0.0028479035952365885, 0.010130140285220204),
(6, 23, 0.010134539173034628, 0.0027409111003670866),
(1, 14, 0.0021512604982168284, 0.007634557054424806),
(6, 23, 0.0097328526258716325, 0.0025171873189777463),
(1, 18, 0.0023787402741932188, 0.0094038353784124031),
(6, 20, 0.010513910332348423, 0.0023881516914407677),
(1, 18, 0.0021776041520641886, 0.0090332239350091048),
(6, 26, 0.0081952877564432369, 0.0019973594050007892),
(1, 14, 0.0015394848578418681, 0.0067313375235303254),
(6, 20, 0.0097910161180642056, 0.0019958918966509784),
(1, 22, 0.0019678958913248159, 0.011453192969232494),
(6, 26, 0.0075805204065633423, 0.0016398834443728109),
(3, 4, 0.0012045389089476732, 0.0062620608867065448),
(1, 22, 0.0017205436341559122, 0.010869508978505405),
(6, 20, 0.0090811386489883638, 0.0015490535559083778),
(1, 12, 0.00048034000391684813, 0.0051887509168260185),
(6, 26, 0.0069668843255321772, 0.0012277928769784),
(3, 4, 0.00084374126485158463, 0.0056649016306080293),
(6, 20, 0.0084933681673405731, 0.0012602019034798756),
(1, 22, 0.0012480706216621844, 0.01007502697980781),
(1, 12, 0.00017912322591058345, 0.0046691262924675155),
(6, 26, 0.0064242299959542835, 0.00088011376448514757),
(1, 22, 0.0010664601131559724, 0.0095957985637879391),
(6, 20, 0.0079118604040545049, 0.00093074769974670947),
(3, 4, 0.00042159426991790895, 0.0049693927585374668),
(6, 26, 0.0059799942314312116, 0.00066366680821691314),
(1, 12, -0.00015422645711731406, 0.004166688019160111),
(1, 22, 0.00078269404529341877, 0.0089745190014488309),
(6, 18, 0.008202488292096478, 0.00069325079202193834),
(3, 4, 0.00019061434587196041, 0.0045258708200625088),
(6, 26, 0.0055469471828109313, 0.00040744166505133912),
(1, 24, 0.00063087350838937791, 0.010383225529641245),
(6, 18, 0.0077409416391903824, 0.00051473479460169909),
(1, 12, -0.00043268408893247664, 0.0036482920765725829),
(6, 26, 0.0051840059793392766, 0.00025284389072201036),
(1, 24, 0.00045791743613388472, 0.009926512878836188),
(6, 18, 0.0073081114579442007, 0.00036169918755100928),
(3, 4, -0.00014247755846385457, 0.0039872246269449206),
(1, 12, -0.00057388304967850921, 0.0033179023279560666),
(6, 26, 0.0048349420928073036, 6.5885909059468296e-05),
(1, 24, 0.00027468312203378988, 0.0093896313080098961),
(6, 18, 0.006896494837288672, 0.0001823987970790801),
(3, 4, -0.00027832676950270279, 0.0036591581754794071),
(1, 24, 0.00019277331962021214, 0.0089925024543151058),
(6, 26, 0.0045244659909296119, -9.0429797420152165e-05),
(6, 15, 0.0079010977645960958, 0.00010975798409962967),
(1, 11, -0.0011209681265480073, 0.002713159735495436),
(1, 24, 7.9022629481167241e-05, 0.0086299643612302388),
(6, 30, 0.0037167144022671652, -0.00030082291565863091),
(1, 11, -0.0011422749449319354, 0.0025588470522321135),
(6, 15, 0.0075222368793399514, -2.3013918886976208e-05),
(3, 4, -0.00049241197317257193, 0.0032052456598808121),
(1, 24, -4.0443248151307132e-05, 0.0082014626240570366),
(6, 34, 0.0031103871179248015, -0.00055580687976753687),
(6, 15, 0.0072005203300829672, -0.00010644207474729094),
(1, 12, -0.00093549739651648933, 0.0025196057580324674),
(1, 24, -0.00012169168010173467, 0.0078876823241184335),
(6, 34, 0.0029381879735670443, -0.00061697967044571406),
(3, 4, -0.0005995017307232998, 0.0028938330546308469),
(6, 15, 0.006893862952015147, -0.00020441541223946799),
(1, 11, -0.0012779100138430729, 0.0021497682566290833),
(6, 34, 0.0027767409681702716, -0.00066504402439960869),
(1, 24, -0.00023275063285739815, 0.0075293391553319655),
(6, 30, 0.0030584108812427685, -0.00055795280923462269),
(1, 11, -0.0013124873060361348, 0.0020287436981944315),
(6, 15, 0.0065105453831531337, -0.00029244666189479594),
(3, 4, -0.00071236825298844595, 0.0026337009563031804),
(1, 24, -0.00029817903190408672, 0.0071833574381755978),
(6, 34, 0.0025625303594109727, -0.00075322559956184716),
(6, 15, 0.0062517157430380934, -0.00033651362728803888),
(1, 11, -0.0013501498715178415, 0.0018679411536832626),
(1, 24, -0.00034264324484200491, 0.0069336539944160067),
(6, 34, 0.0024359083998682913, -0.00078006737577785052),
(3, 4, -0.00075884657003690004, 0.0024043259658983571),
(6, 34, 0.0023654111478873291, -0.00078368684519424339),
(6, 15, 0.0059382799104303313, -0.00039653631093222209),
(1, 11, -0.0013781446548844511, 0.0017316563812782638),
(1, 24, -0.00040475819412537091, 0.0066467752346011091),
(6, 34, 0.0022532393521137958, -0.00080151120713040655),
(3, 4, -0.00079691904856599432, 0.0022512655639134152),
(6, 15, 0.0057164245159342765, -0.00043865649504439187),
(1, 24, -0.00043044877127734391, 0.0064108189282937296),
(6, 34, 0.0021488104809110438, -0.00081382304548685395),
(1, 11, -0.0013789755715420873, 0.0015831457456926994),
(6, 15, 0.0054954864364630124, -0.00045749071093160835),
(1, 24, -0.00045284671021962364, 0.0061994045444290222),
(6, 34, 0.0020523642258183125, -0.00082201802833785495),
(3, 4, -0.00083124294777603283, 0.0020760359686718293),
(1, 11, -0.0013559901486445535, 0.0014785925463049751),
(6, 20, 0.0037929008225567272, -0.00054469335370128295),
(1, 24, -0.00047343506492959764, 0.0059409360902646351),
(6, 34, 0.0019667199609019327, -0.00084415598330759309),
(1, 11, -0.001348081387022012, 0.0014113162307257661),
(6, 15, 0.0051441213922296634, -0.0005014857907826274),
(3, 4, -0.00083481924464615055, 0.0019234700979026428),
(7, 15, -0.0010218468326273723, 0.0016052733432309649),
(6, 34, 0.001905072888122448, -0.00087121961390850607),
(1, 24, -0.00050404307166047565, 0.0056872489830166175),
(6, 34, 0.0018588943285024688, -0.00086467801426766151),
(7, 15, -0.0010546539865043504, 0.0015792819524575905),
(6, 15, 0.0049649389217943912, -0.00053379610445062112),
(7, 15, -0.0010509954279437188, 0.0015477953608459382),
(6, 34, 0.0018150938607793461, -0.00088016303652828853),
(0, 58, -0.0016775152418027561, 0.0011911986745429233),
(1, 28, -0.00050287587724801497, 0.0085212286273276035),
(6, 30, 0.0020528541985057737, -0.00078186813063589242),
(7, 13, -0.0011962448608604523, 0.0014150237208589425),
(1, 11, -0.001369843876821833, 0.0012514903369132168),
(6, 34, 0.0017583303265034107, -0.0008999213594986479),
(7, 13, -0.0011913261187247517, 0.0013802524681215365),
(6, 34, 0.0017325107333965731, -0.00089959295815187842),
(7, 15, -0.001081824047294083, 0.0014647914230220339),
(6, 15, 0.0047593960815079505, -0.00057944335101442956),
(0, 58, -0.0016743335727536081, 0.0011087509695645926),
(7, 13, -0.0011887747751726161, 0.0013331182801003712),
(6, 34, 0.0016962992509123116, -0.00091364753218378225),
(1, 28, -0.00054070038911084258, 0.0081989587638261092),
(6, 30, 0.001935548753932203, -0.00080901048001498022),
(7, 13, -0.001207476680509634, 0.0013185219626238222),
(1, 11, -0.001382979368925478, 0.0011681320727444857),
(6, 34, 0.0016520054141232095, -0.00091678432999990319),
(7, 15, -0.0010934906956773286, 0.0013919158338771447),
(6, 15, 0.0045952081789516815, -0.00059994662114886451),
(7, 13, -0.0011926702004911071, 0.0012712113593219979),
(6, 34, 0.0016223126875334426, -0.00091977887411755883),
(3, 4, -0.00091506126678668335, 0.0016383371247913686),
(0, 58, -0.0016537805282090833, 0.0010237541842362486),
(7, 15, -0.0010805482534986736, 0.0013383185649381284),
(6, 26, 0.0022612741883338222, -0.00076111316301430128),
(1, 28, -0.0005596382936640127, 0.0078517670535973826),
(6, 34, 0.0015858455863891274, -0.00092486394652527694),
(7, 13, -0.0012014668137970161, 0.0012342272175156379),
(6, 34, 0.00156597025659392, -0.00092018529707840573),
(7, 13, -0.0011943783425462568, 0.0012183018339830985),
(6, 15, 0.0044269392986612159, -0.00061326599823105922),
(1, 11, -0.001381723389869222, 0.0010864292260644971),
(7, 13, -0.0011789002204380858, 0.0011911449510294079),
(6, 34, 0.0015526779110046839, -0.00093091980592904572),
(0, 58, -0.0016352530961607765, 0.00096725413021001504),
(7, 15, -0.0010742452581461008, 0.0012706720270901997),
(6, 30, 0.0017998704310363881, -0.00083906993104684901),
(1, 28, -0.00056715160409738096, 0.0075802630009369877),
(6, 34, 0.0015069278434665433, -0.00091689946302538647),
(7, 13, -0.0011869375143013763, 0.0011715239430029371),
(6, 26, 0.0021104069365875558, -0.00075219556011220736),
(7, 13, -0.0011790003204608973, 0.00115778125447902),
(6, 15, 0.0042592835753694509, -0.00061441132115995945),
(1, 11, -0.0013648553932654032, 0.001035330283846023),
(7, 13, -0.0011620053770344178, 0.0011333584588503931),
(6, 34, 0.0014868867025532449, -0.00092311273809585323),
(0, 58, -0.0016089059670056523, 0.00092094545074144531),
(7, 15, -0.0010597745360432613, 0.0012130917084064916),
(6, 34, 0.0014707294791959247, -0.00091944479332547416),
(3, 4, -0.00089562975314886261, 0.0014606850113665533),
(6, 30, 0.0016886165480022872, -0.00081554605044186575),
(7, 13, -0.001170792988567395, 0.0011226089015864782),
(6, 15, 0.0041320433016672356, -0.00061072332113475461),
(5, 15, -0.0022633888034744891, 0.00080534753163786219),
(1, 28, -0.00056934209211157273, 0.007275636493897673),
(6, 34, 0.0014382480151818474, -0.00091204537091292852),
(5, 15, -0.0022164882339513973, 0.00078520634472120621),
(6, 23, 0.0024068686187426777, -0.00070804087792806147),
(5, 15, -0.0022053550524655198, 0.00077870347125958697),
(6, 20, 0.0028974679502711295, -0.00066927758179008954),
(7, 15, -0.0010564115565959032, 0.0011781824350925248),
(6, 40, 0.0011652744569307265, -0.0010720536520179259),
(1, 11, -0.0013347887254862992, 0.00097524926626981238),
(5, 15, -0.0021853125569061809, 0.00076574166953880625),
(6, 26, 0.0020138947594373563, -0.0007559087567337178),
(7, 13, -0.0011393868118878051, 0.001067439072371557),
(6, 40, 0.0011562932806033484, -0.0010718184379074499),
(6, 15, 0.0040328893729781471, -0.00061199870642806773),
(5, 15, -0.0022211228721135583, 0.00077226222674292913),
(6, 20, 0.0028040453188023983, -0.0006569887375626807),
(5, 15, -0.0022125451980253984, 0.00076746628643791902),
(1, 11, -0.0013085355330289187, 0.00094504780011468519),
(6, 23, 0.0023152561056912352, -0.00069595141554711169),
(5, 15, -0.0021875305032442553, 0.00075644102630631569),
(6, 33, 0.0014226730206224221, -0.00086985662094378816),
(7, 15, -0.0010535767655955671, 0.0011515173087348445),
(6, 20, 0.0027759644603399395, -0.00065582292669095327),
(5, 15, -0.0021832288329774307, 0.00075177493221647402),
(1, 28, -0.00056898429082462298, 0.0070185224030576377),
(6, 40, 0.0011298620283108009, -0.0010630146563080289),
(0, 58, -0.0015470662794198316, 0.00084096738306323887),
(7, 15, -0.0010325903533354526, 0.0011225659196015352),
(6, 30, 0.0016033699800554533, -0.00081147630069588474),
(5, 15, -0.002131863766508266, 0.00073050609079754409),
(6, 20, 0.0027841070106823297, -0.0006630143721505882),
(5, 15, -0.0021254704938950147, 0.00072714898104162819),
(6, 14, 0.0042790239562856044, -0.00060553324434545132),
(7, 13, -0.0011156353559992837, 0.0010213154117631777),
(6, 40, 0.0011097227442807898, -0.0010517766861190363),
(1, 11, -0.0012842657208081865, 0.00091216133235889191),
(6, 26, 0.0018862717998616072, -0.00072677333835370302),
(5, 15, -0.0021457210776423081, 0.0007306231590234935),
(6, 22, 0.0023774632809429627, -0.00067079115751546205),
(5, 15, -0.0021345494413155153, 0.00072594101424397288),
(6, 18, 0.0030899478617374032, -0.00062468940093674127),
(5, 15, -0.0021263545474531896, 0.00072230676605498912),
(6, 40, 0.0010780250125482129, -0.0010266907981355635),
(7, 15, -0.0010295210151783011, 0.0011061943670478292),
(1, 28, -0.00055966514287148546, 0.0068003296980058796),
(6, 40, 0.0010819377663668995, -0.0010322998045384465),
(7, 13, -0.0010991478708357082, 0.00099806517831223674),
(6, 23, 0.002220809453777809, -0.00068318795050306279),
(5, 15, -0.0020895879861165972, 0.00070729692034587064),
(6, 20, 0.0026760614619057168, -0.00064482928427188324),
(5, 15, -0.0020821722743184063, 0.00070413932288471213),
(6, 30, 0.001532048485454608, -0.00078661428610977979),
(1, 11, -0.0012613488496350329, 0.00088738577813603909),
(6, 14, 0.004088912133983315, -0.0005856100442732015),
(5, 15, -0.0020991699506111633, 0.00070854002804051968),
(0, 58, -0.0014888623772518366, 0.0007950044522384537),
(6, 40, 0.0010519232604221133, -0.0010085162596413393),
(7, 15, -0.0010132446549762804, 0.0010817747473021542),
(6, 22, 0.0022991415930982335, -0.00065516050260105269),
(5, 15, -0.002075776899810785, 0.00069938076617320072),
(6, 15, 0.0037288989513582982, -0.00058604910464557492),
(7, 3, -0.0021268590830590848, 0.00069309654547050669),
(1, 22, -0.00059611921438025052, 0.0033255588747487285),
(6, 40, 0.0010503474626808766, -0.0010095797955267287),
(7, 15, -0.00099176165376617712, 0.0010565061658697008),
(6, 34, 0.0012732193866983861, -0.00085298506493860842),
(5, 15, -0.0020327477178357792, 0.00068345509533014983),
(6, 22, 0.002292264917847996, -0.00065516837278586362),
(7, 13, -0.0010714336790293658, 0.0009647559968036382),
(6, 26, 0.0017935096301975081, -0.00070131163617998991),
(5, 15, -0.002033844771462534, 0.00068304760492211142),
(6, 20, 0.0025745904337569538, -0.0006251348803722153),
(5, 15, -0.0020259697326311587, 0.00068007348685538891),
(1, 12, -0.0010491347765562366, 0.00096707379245686992),
(6, 40, 0.0010348047644581299, -0.00099758701434067044),
(1, 28, -0.00054039357298879868, 0.0064925686875487798),
(6, 14, 0.003961723343750374, -0.00057145864636226368),
(7, 3, -0.0020829314441386791, 0.00067594048551367731),
(6, 40, 0.0010163887933904406, -0.00098059019766846443),
(7, 15, -0.00097583769537840754, 0.0010356732719304608),
(6, 30, 0.0014546550718200219, -0.00075338634144249384),
(5, 15, -0.0020015922760770913, 0.00067061263643703329),
]

use_iteration = 260

def approx_function(values, iteration):
    pushes = []
    for func in exported_functions[:iteration]:
        feature = features[func[0]]
        value = feature[1](values[zcolumns[feature[0]]])
        splitting_point = feature[2][func[1]]
        target = func[2] if value < splitting_point else func[3]
        pushes.append(push_factor * target)
    return np.sum(pushes)

def submit():
    with open(path+properties_2016) as fd, open(path+my_submission, "w") as fdw:
        fd.readline()
        fdw.write("ParcelId,201610,201611,201612,201710,201711,201712\n")
        lcount = 0
        while True:
            line = fd.readline()
            if not line: break
            lcount += 1
            if lcount % 100000 == 0:
                print(lcount)
            values = line.strip().split(",")
            parcelid = values[zcolumns["parcelid"]]
            logerror = approx_function(values, use_iteration)
            e = "{:.4f}".format(logerror)
            fdw.write("{p},{e},{e},{e},{e},{e},{e}\n".format(p=parcelid, e=e))

def zipit():
    with zipfile.ZipFile(path+my_submission+".zip", "w", compression=zipfile.ZIP_DEFLATED) as fd:
        fd.write(path+my_submission)

